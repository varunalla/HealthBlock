/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DoctorHealthBlock,
  DoctorHealthBlockInterface,
} from "../DoctorHealthBlock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getDoctorInfo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_age",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_email",
        type: "string",
      },
      {
        internalType: "string",
        name: "_specialization",
        type: "string",
      },
    ],
    name: "registerDoctor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d0d806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b2d258ff1461003b578063b380f5c614610057575b600080fd5b610055600480360381019061005091906107be565b610078565b005b61005f61036d565b60405161006f9493929190610907565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506040516020016100ca90610992565b60405160208183030381529060405280519060200120856040516020016100f191906109d8565b604051602081830303815290604052805190602001200361011157600080fd5b60405160200161012090610992565b604051602081830303815290604052805190602001208360405160200161014791906109d8565b604051602081830303815290604052805190602001200361016757600080fd5b60405160200161017690610992565b604051602081830303815290604052805190602001208260405160200161019d91906109d8565b60405160208183030381529060405280519060200120036101bd57600080fd5b60008460ff161180156101d3575060648460ff16105b6101dc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16111561023a57600080fd5b6040518060a001604052808681526020018560ff1681526020018481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816102ce9190610c05565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160020190816103059190610c05565b50606082015181600301908161031b9190610c05565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050505050565b60606000606080336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161161041557600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000018160010160009054906101000a900460ff16826002018360030183805461048290610a1e565b80601f01602080910402602001604051908101604052809291908181526020018280546104ae90610a1e565b80156104fb5780601f106104d0576101008083540402835291602001916104fb565b820191906000526020600020905b8154815290600101906020018083116104de57829003601f168201915b5050505050935081805461050e90610a1e565b80601f016020809104026020016040519081016040528092919081815260200182805461053a90610a1e565b80156105875780601f1061055c57610100808354040283529160200191610587565b820191906000526020600020905b81548152906001019060200180831161056a57829003601f168201915b5050505050915080805461059a90610a1e565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610a1e565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050509050965096509650965050505090919293565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61069282610649565b810181811067ffffffffffffffff821117156106b1576106b061065a565b5b80604052505050565b60006106c461062b565b90506106d08282610689565b919050565b600067ffffffffffffffff8211156106f0576106ef61065a565b5b6106f982610649565b9050602081019050919050565b82818337600083830152505050565b6000610728610723846106d5565b6106ba565b90508281526020810184848401111561074457610743610644565b5b61074f848285610706565b509392505050565b600082601f83011261076c5761076b61063f565b5b813561077c848260208601610715565b91505092915050565b600060ff82169050919050565b61079b81610785565b81146107a657600080fd5b50565b6000813590506107b881610792565b92915050565b600080600080608085870312156107d8576107d7610635565b5b600085013567ffffffffffffffff8111156107f6576107f561063a565b5b61080287828801610757565b9450506020610813878288016107a9565b935050604085013567ffffffffffffffff8111156108345761083361063a565b5b61084087828801610757565b925050606085013567ffffffffffffffff8111156108615761086061063a565b5b61086d87828801610757565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156108b3578082015181840152602081019050610898565b60008484015250505050565b60006108ca82610879565b6108d48185610884565b93506108e4818560208601610895565b6108ed81610649565b840191505092915050565b61090181610785565b82525050565b6000608082019050818103600083015261092181876108bf565b905061093060208301866108f8565b818103604083015261094281856108bf565b9050818103606083015261095681846108bf565b905095945050505050565b600081905092915050565b50565b600061097c600083610961565b91506109878261096c565b600082019050919050565b600061099d8261096f565b9150819050919050565b60006109b282610879565b6109bc8185610961565b93506109cc818560208601610895565b80840191505092915050565b60006109e482846109a7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a3657607f821691505b602082108103610a4957610a486109ef565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ab17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610a74565b610abb8683610a74565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610b02610afd610af884610ad3565b610add565b610ad3565b9050919050565b6000819050919050565b610b1c83610ae7565b610b30610b2882610b09565b848454610a81565b825550505050565b600090565b610b45610b38565b610b50818484610b13565b505050565b5b81811015610b7457610b69600082610b3d565b600181019050610b56565b5050565b601f821115610bb957610b8a81610a4f565b610b9384610a64565b81016020851015610ba2578190505b610bb6610bae85610a64565b830182610b55565b50505b505050565b600082821c905092915050565b6000610bdc60001984600802610bbe565b1980831691505092915050565b6000610bf58383610bcb565b9150826002028217905092915050565b610c0e82610879565b67ffffffffffffffff811115610c2757610c2661065a565b5b610c318254610a1e565b610c3c828285610b78565b600060209050601f831160018114610c6f5760008415610c5d578287015190505b610c678582610be9565b865550610ccf565b601f198416610c7d86610a4f565b60005b82811015610ca557848901518255600182019150602085019450602081019050610c80565b86831015610cc25784890151610cbe601f891682610bcb565b8355505b6001600288020188555050505b50505050505056fea264697066735822122065e7a59a723643d5a5a970f83470b1c99306fabc306737f6699a843505af414864736f6c63430008110033";

type DoctorHealthBlockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DoctorHealthBlockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DoctorHealthBlock__factory extends ContractFactory {
  constructor(...args: DoctorHealthBlockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DoctorHealthBlock> {
    return super.deploy(overrides || {}) as Promise<DoctorHealthBlock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DoctorHealthBlock {
    return super.attach(address) as DoctorHealthBlock;
  }
  override connect(signer: Signer): DoctorHealthBlock__factory {
    return super.connect(signer) as DoctorHealthBlock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DoctorHealthBlockInterface {
    return new utils.Interface(_abi) as DoctorHealthBlockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DoctorHealthBlock {
    return new Contract(address, _abi, signerOrProvider) as DoctorHealthBlock;
  }
}
