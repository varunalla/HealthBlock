/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PatientProviderInterface extends utils.Interface {
  functions: {
    "requestProvider(address)": FunctionFragment;
    "approvePatientProviderRequest(address)": FunctionFragment;
    "rejectPatientProviderRequest(address)": FunctionFragment;
    "getPatientRequests()": FunctionFragment;
    "getProviderRequests()": FunctionFragment;
    "getPatientProviders()": FunctionFragment;
    "getProviderPatients()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "requestProvider"
      | "approvePatientProviderRequest"
      | "rejectPatientProviderRequest"
      | "getPatientRequests"
      | "getProviderRequests"
      | "getPatientProviders"
      | "getProviderPatients"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "requestProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePatientProviderRequest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectPatientProviderRequest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderPatients",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "requestProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePatientProviderRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectPatientProviderRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderPatients",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PatientProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PatientProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    requestProvider(
      _provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvePatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectPatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPatientRequests(overrides?: CallOverrides): Promise<[string[]]>;

    getProviderRequests(overrides?: CallOverrides): Promise<[string[]]>;

    getPatientProviders(overrides?: CallOverrides): Promise<[string[]]>;

    getProviderPatients(overrides?: CallOverrides): Promise<[string[]]>;
  };

  requestProvider(
    _provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvePatientProviderRequest(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectPatientProviderRequest(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPatientRequests(overrides?: CallOverrides): Promise<string[]>;

  getProviderRequests(overrides?: CallOverrides): Promise<string[]>;

  getPatientProviders(overrides?: CallOverrides): Promise<string[]>;

  getProviderPatients(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    requestProvider(
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvePatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectPatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPatientRequests(overrides?: CallOverrides): Promise<string[]>;

    getProviderRequests(overrides?: CallOverrides): Promise<string[]>;

    getPatientProviders(overrides?: CallOverrides): Promise<string[]>;

    getProviderPatients(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    requestProvider(
      _provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvePatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectPatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPatientRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getProviderRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getPatientProviders(overrides?: CallOverrides): Promise<BigNumber>;

    getProviderPatients(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    requestProvider(
      _provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvePatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectPatientProviderRequest(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPatientRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPatientProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderPatients(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
